package com.java.kalpesh.exception;

import java.io.File;
import java.io.FileNotFoundException;
import java.io.FileReader;
import java.io.IOException;

public class ExceptionHandlingWithTryCatchFinally {
	public static void main(String args[]) {
		ExceptionHandlingWithTryCatchFinally.checked();
		System.out.println("\n\n\n");
		ExceptionHandlingWithTryCatchFinally.unchecked();

	}

	public static void checked() {
		try {
			File file = new File("/Demo Java/Static File/Test.txt");
			FileReader fr = new FileReader(file);
		} catch (FileNotFoundException f) {
			f.printStackTrace();
			System.out.println("getMessage : " + f.getMessage());
			System.out.println("getCause : " + f.getCause());
			System.out.println("toString() : " + f.toString());
		} catch (IOException i) {
			i.printStackTrace();
		} finally {
			System.out.println("In Finally Block");
		}
	}

	public static void unchecked() {
		try {
			int num[] = { 1, 2, 3, 4 };
			System.out.println(num[5]);
		} catch (ArrayIndexOutOfBoundsException e) {
			System.out.println("Exception thrown  :" + e);
		} catch (Exception e) {
			System.out.println("getMessage : " + e.getMessage());
			System.out.println("getCause : " + e.getCause());
			System.out.println("toString() : " + e.toString());
		} finally {
			System.out.println("In Finally Block");
		}
	}
}

/*
 * An exception (or exceptional event) is a problem that arises during the
 * execution of a program. When an Exception occurs the normal flow of the
 * program is disrupted and the program/Application terminates abnormally, which
 * is not recommended, therefore, these exceptions are to be handled.
 * 
 * Checked exceptions − A checked exception is an exception that is checked
 * (notified) by the compiler at compilation-time, these are also called as
 * compile time exceptions. These exceptions cannot simply be ignored, the
 * programmer should take care of (handle) these exceptions.
 * 
 * Unchecked exceptions − An unchecked exception is an exception that occurs at
 * the time of execution. These are also called as Runtime Exceptions. These
 * include programming bugs, such as logic errors or improper use of an API.
 * Runtime exceptions are ignored at the time of compilation.
 * 
 * Errors − These are not exceptions at all, but problems that arise beyond the
 * control of the user or the programmer. Errors are typically ignored in your
 * code because you can rarely do anything about an error. For example, if a
 * stack overflow occurs, an error will arise. They are also ignored at the time
 * of compilation.
 * 
 * All exception classes are subtypes of the java.lang.Exception class. The
 * exception class is a subclass of the Throwable class. Other than the
 * exception class there is another subclass called Error which is derived from
 * the Throwable class.
 * 
 * Errors are abnormal conditions that happen in case of severe failures, these
 * are not handled by the Java programs. Errors are generated to indicate errors
 * generated by the runtime environment. Example: JVM is out of memory.
 * Normally, programs cannot recover from errors.
 * 
 * The Exception class has two main subclasses: IOException class and
 * RuntimeException Class.
 */